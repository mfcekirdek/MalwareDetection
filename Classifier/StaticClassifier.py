import os
import ember
import lightgbm as lgb

class StaticClassifier:
    def __init__(self):
        print()

    def saveModel(self,path):
        self.lgbm_model.save_model(path)

    def loadModel(self,path):
        self.lgbm_model = lgb.Booster(model_file=path)
        return self.lgbm_model

    def trainModel(self,vectorizedDataDir):
        self.lgbm_model = ember.train_model(vectorizedDataDir)
        return self.lgbm_model

    def predict_sample(self,binary_data):
        score = ember.predict_sample(self.lgbm_model, binary_data)
        return score

    def predictMultipleSamples(self,dirOfSamples,resultsFile):
        outFile = open(resultsFile, "w")
        for root, dirs, files in os.walk(dirOfSamples):
            path = root.split(os.sep)
            for file in files:
                absolute_file_path = ''.join([str(x) + "/" for x in path]) + file
                # print(absolute_file_path)
                binary_data = open(absolute_file_path, "rb").read()
                score = self.predict_sample(binary_data)
                print("\t".join((absolute_file_path, str(score))))
                outFile.write("\t".join((absolute_file_path, str(score))) + "\n")
        outFile.close()

if __name__ == '__main__':

    dirOfSamples = "../data/54"
    print("Training LightGBM model")
    classifier = StaticClassifier()
    # classifier.trainModel("../FeatureExtraction/StaticFeatures/out")
    classifier.loadModel("../FeatureExtraction/StaticFeatures/out/outmodel.txt")
    # classifier.saveModel("../FeatureExtraction/StaticFeatures/out/outmodel2.txt")
    classifier.predictMultipleSamples(dirOfSamples,"../FeatureExtraction/StaticFeatures/out/res.txt")