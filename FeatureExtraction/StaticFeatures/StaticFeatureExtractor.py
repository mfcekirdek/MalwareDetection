import os
import ember
import pandas
from ember import features
import json
import numpy

# NOT: ember klasoru icindeki __init.py__ icerisinde eskiden default olarak asagidaki 4 field yerine degerler vardi.
# Bunun yerine degisken kullanir hale geldik:

# Degiskenlerin Orjinal ember seti icin degerler:
# metadatacsv = "embermetadata.csv"
# total_jsonl_size = 6
# train_record_size = 900000
# test_record_size = 200000

# Bizim 2000lik dataset (1600Train[800M+800B] + 400Test[200M+200B]) icin asagidaki degerler kullanildi.
# metadatacsv = "mfcmetadata.csv"
# total_jsonl_size = 1
# train_record_size = 1600
# test_record_size = 400


class StaticFeatureExtractor:
    # dataDir: Statik featurelari cikarilacak 32bit PE dosyalarinin bulundugu dizin
    # filesAndLabelsCSVFile: icinde filepath ve label ciftleri bulunduran CSV
    # outDir: cikarilan raw (.jsonl files) ve vectorized (.dat files) featurelarin konulacagi dizin

    def __init__(self,dataDir,filesAndLabelsCSVFile,outDir):
        self.extractor = features.PEFeatureExtractor()
        self.dataDir = dataDir
        self.outDir = outDir
        self.filesAndLabels = createFileLabelDict(filesAndLabelsCSVFile)

    # createRawFeatures metodu
    # features.py icindeki PEFeatureExtractor classinin raw_features metodu bir pe dosyasina ait sha degeri ve featurelari dictionary olarak donuyor
    # Biz burada bu dictionary'e tek tek Label'leri injecte ediyoruz ve her bir PE dosyasina ait bilgileri bir json kaydi olarak jsonl dosyasina ekliyoruz.
    # outJsonlFile: cikarilan raw featurelarin yazilacagi jsonl dosyasinin ismi

    def createRawFeatures(self,outJsonlFile):
        ctr = 1
        outFilePath = self.outDir+ "/"+ outJsonlFile
        if not os.path.exists(outFilePath):
            with open(outFilePath, 'w') as outFile:
                for root, dirs, files in os.walk(self.dataDir):
                    path = root.split(os.sep)
                    for file in files:
                        absolute_file_path = ''.join([str(x) + "/" for x in path]) + file
                        # print(absolute_file_path)
                        print(ctr, file)
                        ctr = ctr + 1
                        abs_file = open(absolute_file_path, "rb")
                        bytez = abs_file.read()
                        abs_file.close()
                        rf = self.extractor.raw_features(bytez)

                        # Adding label to raw_features
                        rf.update({'label': self.filesAndLabels[file]})
                        json.dump(rf, outFile, default=default)
                        outFile.write("\n")
                    # print(rf)
        else:
            print("Raw features (.jsonl files) are already created")

    # Raw featurelari kullanarak vectorized featurelar ureten fonksiyon
    # Bu fonksiyonun calismasi icin outDir icerisinde raw featurelarin yani jsonl dosyalarinin bulunmasi gereklidir.
    # Fonksiyon calistiktan sonra X_train.dat, y_train.dat, X_test.dat ve y_test.dat olmak uzere 4 adet dat dosyasi uretir.
    # Bu nokta basarili sekilde bitti ise featurelar classification icin hazirdir, StaticClassifier calistirilabilir.

    def createVectorizedFeatures(self):
        if not os.path.exists(self.outDir) or not os.path.isdir(self.outDir ):
            print("{} is not a directory with raw feature files".format(self.outDir ))
        X_train_path = os.path.join(self.outDir, "X_train.dat")
        y_train_path = os.path.join(self.outDir, "y_train.dat")

        if not (os.path.exists(X_train_path) and os.path.exists(y_train_path)):
            print("Creating vectorized features")
            ember.create_vectorized_features(self.outDir)
        else:
            print("Vectorized features (.dat files) are already created")


def createFileLabelDict(csv):
    df = pandas.read_csv(csv, sep=',')
    file = df['File']
    label = df['Label']
    dic = {}

    for i in range(0,len(file)):
        filename_w_ext = os.path.basename(file[i])
        dic[filename_w_ext] = label[i]
    return dic

def default(o):
    if isinstance(o, numpy.int64): return int(o)
    raise TypeError


if __name__ == '__main__':
    extractor = StaticFeatureExtractor('../../data/train','../../data/files_and_labels.csv','./out')
    extractor.createRawFeatures('train_features_0.jsonl')
    extractor.createRawFeatures('test_features.jsonl')
    extractor.createVectorizedFeatures()




