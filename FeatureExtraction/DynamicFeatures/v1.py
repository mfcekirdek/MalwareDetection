import json

topExt=["bak", "bat", "bmp", "cfg", "clb", "com", "vbs", "dat", "db",
"dll", "doc", "docx", "exe", "ico", "ime", "inf", "ini", "jpeg",
"jpg", "js", "lnk", "log", "otf", "pdf", "pnf", "png", "reg",
"rtf", "sav", "sys", "tmp", "txt", "xls", "xlsx", "xml","docm","ps1","psc1","psm1"]

topPt= ["C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs","C:\\ProgramData",
"C:\\Users\\Malware\\AppData\\Local\\Temp","C:\\Users\\Malware\\AppData\\Local",
"C:\\Users\\Malware\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs","C:\\Users\\Malware\\AppData\\Roaming","C:\\Users\\Malware",
"C:\\Program Files\\Common Files","C:\\Program Files","C:\\$Recycle.Bin","C:\\Windows\\System32\\drivers","C:\\Windows\\System32","C:\\Windows"]

fileTypes=["file","directory","drivers","ADS","pipe"]

fileSize=["0-64", "65-4096", "4097-262144","262144+"]

class FileSystemFeatureExtractor:

    def __init__(self,json_report_path):

        self.json_report_path = json_report_path
        self.data = json.load(open(self.json_report_path))

        self.numberOfFilesDeleted = 0                           #1
        self.numberOfFilesModified = 0                          #2
        self.numberOfFilesCreated = 0                           #108
        self.numberOfFilesRead = 0                              #163
        self.numberOfFilesAccessed = 0                          #169

        self.numberOfFilesDeletedInDistinctPaths = 0            #3
        self.numberOfFilesDeletedWithDistinctExtensions = 0     #4
        self.numberOfFilesModifiedInDistinctPaths = 0           #53
        self.numberOfFilesModifiedWithDistinctExtensions = 0    #54
        self.numberOfFilesCreatedInDistinctPaths = 0            #110
        self.numberOfFilesCreatedWithDistinctExtensions = 0     #109

        self.topExtensionFrequencyOfDeletedFiles = dict.fromkeys(topExt,0)  #5-38
        self.topExtensionFrequencyOfModifiedFiles = dict.fromkeys(topExt,0)  #55-88
        self.topExtensionFrequencyOfCreatedFiles = dict.fromkeys(topExt,0)   #115-148

        self.knownPathFrequencyOfDeletedFiles = dict.fromkeys(topPt,0)      #39-52
        self.knownPathFrequencyOfModifiedFiles = dict.fromkeys(topPt,0)     #89-102
        self.knownPathFrequencyOfCreatedFiles = dict.fromkeys(topPt,0)      #149-162

        self.fileTypeFrequencyOfModifiedFiles = dict.fromkeys(fileTypes,0)  #103-107
        self.fileTypeFrequencyOfReadFiles = dict.fromkeys(fileTypes,0)      #164-168
        self.fileTypeFrequencyOfAccessedFiles = dict.fromkeys(fileTypes,0)  #170-174

        self.fileSizeFrequency = [0] * 4    #111-114

        self.pathsDeleted = []
        self.extensionsDeleted = []
        self.pathsModified = []
        self.extensionsModified = []
        self.pathsCreated = []
        self.extensionsCreated = []

    def extract_features(self):

        generic = self.data["behavior"]["generic"]
        dropped = self.data["dropped"]

        for k in generic:
            if(len(k["summary"]) > 0 ):
                if("file_deleted" in k["summary"]):
                    self.numberOfFilesDeleted = self.numberOfFilesDeleted + len(k["summary"]["file_deleted"])
                    for p in k["summary"]["file_deleted"]:
                        self.pathsDeleted.append("\\".join(p.split("\\")[0:-1]))
                        self.extensionsDeleted.append(p.split(".")[-1])

                if("file_written" in k["summary"]):
                    self.numberOfFilesModified = self.numberOfFilesModified + len(k["summary"]["file_written"])
                    for p in k["summary"]["file_written"]:
                        self.pathsModified.append("\\".join(p.split("\\"))[0:-1])
                        ext = p.split(".")[-1]
                        self.extensionsModified.append(ext)

                        if(ext == "sys"):
                            self.fileTypeFrequencyOfModifiedFiles["drivers"] = self.fileTypeFrequencyOfModifiedFiles["drivers"] + 1

                        elif ":" in p.split("\\")[-1]:
                            self.fileTypeFrequencyOfModifiedFiles["ADS"] = self.fileTypeFrequencyOfModifiedFiles["ADS"] + 1

                        elif "\\\\.\\" in p:
                            self.fileTypeFrequencyOfModifiedFiles["pipe"] = self.fileTypeFrequencyOfModifiedFiles["pipe"] +1

                        else:
                            self.fileTypeFrequencyOfModifiedFiles["file"] = self.fileTypeFrequencyOfModifiedFiles["file"] + 1


                if("file_created" in k["summary"]):
                    self.numberOfFilesCreated = self.numberOfFilesCreated + len(k["summary"]["file_created"])
                    for p in k["summary"]["file_created"]:
                        self.pathsCreated.append("\\".join(p.split("\\")[0:-1]))
                        self.extensionsCreated.append(p.split(".")[-1])

                if("file_read" in k["summary"]):
                    self.numberOfFilesRead = self.numberOfFilesRead + len(k["summary"]["file_read"])
                    for p in k["summary"]["file_read"]:
                        ext = p.split(".")[-1]

                        if ext == "sys":
                            self.fileTypeFrequencyOfReadFiles["drivers"] = self.fileTypeFrequencyOfReadFiles["drivers"] + 1

                        elif ":" in p.split("\\")[-1]:
                            self.fileTypeFrequencyOfReadFiles["ADS"] = self.fileTypeFrequencyOfReadFiles["ADS"] + 1

                        elif "\\\\.\\" in p:
                            self.fileTypeFrequencyOfReadFiles["pipe"] = self.fileTypeFrequencyOfReadFiles["pipe"] + 1

                        else:
                            self.fileTypeFrequencyOfReadFiles["file"] = self.fileTypeFrequencyOfReadFiles["file"] + 1

                if("file_opened" in k["summary"]):
                    self.numberOfFilesAccessed = self.numberOfFilesAccessed + len(k["summary"]["file_opened"])
                    for p in k["summary"]["file_opened"]:
                        ext = p.split(".")[-1]

                        if(len(p.split(".")) == 1):
                            self.fileTypeFrequencyOfAccessedFiles["directory"]  = self.fileTypeFrequencyOfAccessedFiles["directory"] + 1

                        elif ext == "sys":
                            self.fileTypeFrequencyOfAccessedFiles["drivers"] = self.fileTypeFrequencyOfAccessedFiles["drivers"] + 1

                        elif ":" in p.split("\\")[-1]:
                            self.fileTypeFrequencyOfAccessedFiles["ADS"] = self.fileTypeFrequencyOfAccessedFiles["ADS"] + 1

                        elif "\\\\.\\" in p:
                            self.fileTypeFrequencyOfAccessedFiles["pipe"] = self.fileTypeFrequencyOfAccessedFiles["pipe"] + 1

                        else:
                            self.fileTypeFrequencyOfAccessedFiles["file"] = self.fileTypeFrequencyOfAccessedFiles["file"] + 1

        for k in dropped:
            if(k["size"] >= 0 and k["size"] < 65):
                self.fileSizeFrequency[0] = self.fileSizeFrequency[0] + 1
            elif(k["size"] >= 65 and k["size"] < 4097):
                self.fileSizeFrequency[1] = self.fileSizeFrequency[1] + 1
            elif(k["size"] >= 4097 and k["size"] < 262145):
                self.fileSizeFrequency[2] = self.fileSizeFrequency[2] + 1
            if (k["size"] >= 262145):
                self.fileSizeFrequency[3] = self.fileSizeFrequency[3] + 1

        self.numberOfFilesDeletedInDistinctPaths = len(set(self.pathsDeleted))
        self.numberOfFilesDeletedWithDistinctExtensions = len(set(self.extensionsDeleted))

        self.numberOfFilesModifiedInDistinctPaths = len(set(self.pathsModified))
        self.numberOfFilesModifiedWithDistinctExtensions = len(set(self.extensionsModified))

        self.numberOfFilesCreatedInDistinctPaths = len(set(self.pathsCreated))
        self.numberOfFilesCreatedWithDistinctExtensions = len(set(self.extensionsCreated))

        for key in self.topExtensionFrequencyOfDeletedFiles:
            self.topExtensionFrequencyOfDeletedFiles[key] = self.extensionsDeleted.count(key)

        for x in self.pathsDeleted:
            for key in topPt:
                if key in x:
                    self .knownPathFrequencyOfDeletedFiles[key] = self.knownPathFrequencyOfDeletedFiles[key] + 1
                    break

        for key in self.topExtensionFrequencyOfModifiedFiles:
            self.topExtensionFrequencyOfModifiedFiles[key] = self.extensionsModified.count(key)

        for x in self.pathsModified:
            for key in topPt:
                if key in x:
                    self.knownPathFrequencyOfModifiedFiles[key] = self.knownPathFrequencyOfModifiedFiles[key] + 1
                    break

        for key in self.topExtensionFrequencyOfCreatedFiles:
            self.topExtensionFrequencyOfCreatedFiles[key] = self.extensionsCreated.count(key)

        for x in self.pathsCreated:
            for key in topPt:
                if key in x:
                    self.knownPathFrequencyOfCreatedFiles[key] = self.knownPathFrequencyOfCreatedFiles[key] + 1
                    break

if __name__ == "__main__":
    json_path = "../report2.json"
    extractor = FileSystemFeatureExtractor(json_path)
    extractor.extract_features()
    print
