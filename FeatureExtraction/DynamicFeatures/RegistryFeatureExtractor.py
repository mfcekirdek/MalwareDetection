import json


def has_key(dic,key):
    if key in dic.keys():
        return True
    else:
        return False

keys = ["regkey_written","regkey_read","regkey_opened","regkey_accessed"]

class RegistryFeatureExtractor:

    def __init__(self,json_report_path):
        self.json_report_path = json_report_path

        # Read json data from report file
        self.data = json.load(open(self.json_report_path))

        self.extracted_data = {"regkey_written" : [], "regkey_read":[], "regkey_opened":[], "regkey_accessed":[]}
        self.number_of_features = {"regkey_written":0,"regkey_read":0,"regkey_opened":0,"regkey_accessed":0}

    def extract_features(self):
            generic = self.data["behavior"] ["generic"]
            for i in generic:
                summary = i["summary"]
                for key in keys:
                    if has_key(summary,key):
                        self.extracted_data[key].extend(summary[key])

            self.count_features()

    def count_features(self):
        for key in keys:
            self.number_of_features[key] = len(self.extracted_data[key])

    def show_feature_counts(self):
        print("Number of features: ")
        for key in keys:
            print (key + ": " + str(self.number_of_features[key]))

    def show_features(self):
        print ("Features: ")
        for key in keys:
            print ("Key: " + key)
            print ("[ ")
            for val in self.extracted_data[key]:
                print ("\t-----> " + val)
            print ("]")

    def dumpExtractedDataToFile(self,file='../extracted_data_registry.json'):
        json_data = {"stats" : self.number_of_features,"paths" : self.extracted_data}
        with open(file, 'w') as outfile:
            json.dump(json_data, outfile,indent=4)

if __name__ == "__main__":
    json_path = "../report.json"
    extractor = RegistryFeatureExtractor(json_path)
    extractor.extract_features()
    extractor.show_feature_counts()
    print
    extractor.show_features()
    extractor.dumpExtractedDataToFile()


