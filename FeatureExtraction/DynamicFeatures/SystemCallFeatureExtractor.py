import json

categories = ["system", "file", "browser", "com", "crypto", "process","synchronisation", "registry", "misc", "services", "windows",
"device", "network", "threading", "hooking", "__notification__","resource","ole","ui","exception"]

APIFunctions = ["NtOpenSection", "NtWaitForSingleObject", "GetAsyncKeyState",
                "NtDeleteValueKey", "WSARecv", "getaddrinfo",
                "InternetGetConnectedState", "NtCreateEvent",
                "GetFileVersionInfoSizeW", "GetAdaptersAddresses",
                "NtMakeTemporaryObject", "NtRenameKey", "HttpSendRequestA",
                "GetLocalTime", "NetUserGetLocalGroups", "FindFirstFileExW",
                "CryptRetrieveObjectByUrlW", "NtReadVirtualMemory",
                "HttpAddRequestHeadersA", "RegOpenKeyExW", "NtDelayExecution",
                "InternetCrackUrlA", "SetErrorMode", "ShellExecuteExW",
                "RegOpenKeyExA", "HttpSendRequestW", "HttpAddRequestHeadersW",
                "GetCursorPos", "JsEval", "GetUserNameW", "WinHttpSetTimeouts",
                "WaitForDebugEvent", "FindWindowExA", "GetUserNameA",
                "NtCreateFile", "TransmitFile", "GetSystemTimeAsFileTime",
                "WinHttpOpen", "NtLoadDriver", "GetDiskFreeSpaceA",
                "NtCreateProcess", "NtDeleteKey", "WinHttpQueryHeaders",
                "InternetSetOptionA", "CryptGenKey", "recvfrom", "CryptEncrypt",
                "sendto", "NtSuspendThread", "NtQueryInformationFile",
                "RegCreateKeyExW", "GetSystemTime", "DeviceIoControl",
                "WSASendTo", "FindFirstChangeNotificationW", "NtQueryKey",
                "OpenServiceA", "WriteProcessMemory", "WSARecvFrom",
                "NtSetContextThread", "HttpEndRequestW", "RegQueryValueExA",
                "RemoveDirectoryW", "EnumWindows", "OpenServiceW", "NtSetValueKey","LookupPrivilegeValueW", "NtQueryValueKey", "RegCreateKeyExA",
                "RemoveDirectoryA", "HttpEndRequestA", "RegQueryValueExW",
                "WSASocketW", "NetUserGetInfo", "SetWindowsHookExW",
                "ExitWindowsEx", "WSASend", "WinHttpGetProxyForUrl",
                "StartServiceA", "NtDeviceIoControlFile", "NtReadFile",
                "CryptCreateHash", "FindWindowExW", "NtWriteFile",
                "LdrGetDllHandle", "WinHttpSendRequest", "RtlDecompressBuffer",
                "NtQuerySystemInformation", "NtEnumerateValueKey",
                "CreateDirectoryExW", "CreateThread", "NtLoadKey",
                "SetupDiGetClassDevsA", "SetUnhandledExceptionFilter",
                "NtQuerySystemTime", "GetVolumeNameForVolumeMountPointW",
                "DnsQuery_A", "CryptDecrypt", "recv", "SetupDiGetClassDevsW",
                "NtProtectVirtualMemory", "SHGetFolderPathW", "RegDeleteValueW",
                "GetDiskFreeSpaceExA", "socket", "RegSetValueExW", "WriteConsoleA",
                "LdrGetProcedureAddress", "NtOpenThread", "CopyFileA", "CopyFileW",
                "RegSetValueExA", "GetDiskFreeSpaceExW", "NtEnumerateKey",
                "NtOpenDirectoryObject", "LdrLoadDll", "NtWriteVirtualMemory",
                "URLDownloadToFileW", "WriteConsoleW", "CreateToolhelp32Snapshot",
                "SendNotifyMessageA", "RegCloseKey", "NtOpenEvent",
                "NtSetInformationFile", "HttpSendRequestExW", "NtCreateKey",
                "WinHttpConnect", "MoveFileWithProgressW", "ioctlsocket",
                "WSAStartup", "NtTerminateThread", "DbgUiWaitStateChange",
                "NtTerminateProcess", "send", "shutdown", "SendNotifyMessageW",
                "COleScript_ParseScriptText", "HttpSendRequestExA", "select",
                "NtQueryFullAttributesFile", "CreateRemoteThread","GetSystemMetrics", "NtQueueApcThread", "WSASocketA",
                "CreateServiceA", "WinHttpSetOption", "InternetCloseHandle",
                "DeleteFileA", "NtLoadKey2", "CryptExportKey",
                "CryptImportPublicKeyInfo", "NtAllocateVirtualMemory",
                "ReadProcessMemory", "CreateDirectoryW", "DeleteFileW",
                "VirtualProtectEx", "CreateServiceW", "listen", "NtCreateThread",
                "GetComputerNameW", "NtResumeThread", "CryptAcquireContextA",
                "setsockopt", "InternetReadFile", "CoCreateInstance","RegEnumKeyExW", "FindNextFileW", "ObtainUserAgentString",
                "CryptAcquireContextW", "DnsQuery_W", "NtCreateNamedPipeFile",
                "GetComputerNameA", "NtReplaceKey", "RegEnumKeyExA", "closesocket",
                "NtGetContextThread", "RtlCreateUserThread", "RegEnumValueW",
                "NtCreateSection", "StartServiceW",
                "WinHttpGetIEProxyConfigForCurrentUser", "SetWindowsHookExA",
                "NtOpenMutant", "InternetOpenA", "NtDeleteFile", "NSPStartup",
                "IsDebuggerPresent", "RegEnumValueA", "WinHttpReceiveResponse",
                "InternetOpenW", "CreateProcessInternalW", "connect",
                "RegDeleteKeyA", "NtDuplicateObject", "RegNotifyChangeKeyValue",
                "NtQueryMultipleValueKey", "HttpOpenRequestA", "OpenSCManagerW",
                "GetSystemInfo", "NtCreateProcessEx", "accept", "FindWindowW",
                "ControlService", "NtClose", "RegDeleteKeyW", "CryptHashData",
                "NtOpenProcess", "FindWindowA", "HttpOpenRequestW",
                "NtFreeVirtualMemory", "Process32NextW", "GetLastInputInfo",
                "InternetConnectW", "UnhookWindowsHookEx", "InternetWriteFile",
                "GetDiskFreeSpaceW", "NtSaveKeyEx", "RegEnumKeyW",
                "InternetConnectA", "NtSaveKey", "SetWindowLongA", "CDocument_write",
                "WSAConnect", "RegDeleteValueA", "CopyFileExW", "NtMapViewOfSection",
                "SetupDiGetDeviceRegistryPropertyW", "Process32FirstW",
                "DeleteService", "LsaOpenPolicy", "NtOpenFile", "RegQueryInfoKeyW",
                "NtUnmapViewOfSection", "NtQueryDirectoryFile",
                "NetGetJoinInformation", "FindFirstFileExA", "gethostbyname",
                "DecodeImage", "NtQueryAttributesFile", "RegQueryInfoKeyA","NtCreateMutant", "GetAddrInfoW", "InternetOpenUrlA", "WSAAccept",
                "bind", "NtOpenKey", "InternetCrackUrlW", "DnsQuery_UTF8",
                "CoInternetSetFeatureEnabled", "NtResumeProcess", "OpenSCManagerA",
                "GetFileVersionInfoW", "CryptDecodeObjectEx", "InternetOpenUrlW",
                "OpenSCManagerA", "WinHttpOpenRequest",
                "SetupDiGetDeviceRegistryPropertyA"]

class SystemCallFeatureExtractor:
    def __init__(self,json_report_path):

        self.data = json.load(open(json_report_path))

        self.extracted_data = {"numberOfRunningProcesses" : 0, "totalCategory" : 0,
                               "categoryFrequency" : dict.fromkeys(categories,0),
                               "categoryPercentageFrequency" : dict.fromkeys(categories,0),
                               "APIFrequency" : dict.fromkeys(APIFunctions,0)}

    def extract_features(self):

        apistats = self.data["behavior"]["apistats"]
        processes = self.data["behavior"]["processes"]

        for x in processes:
            if(len(x["calls"]) != 0):
                for call in x["calls"]:
                      self.extracted_data["categoryFrequency"][call["category"]] = self.extracted_data["categoryFrequency"][call["category"]] + 1
                      self.extracted_data["totalCategory"] = self.extracted_data["totalCategory"] + 1

        for v in apistats.values():
            for func,count in v.items():
                try:
                    self.extracted_data["APIFrequency"][func] = self.extracted_data["APIFrequency"][func] + count
                except KeyError:
                    continue

        for k,v in self.extracted_data["categoryFrequency"].items():
            num  = (float(v) / self.extracted_data["totalCategory"]) * 100
            self.extracted_data["categoryPercentageFrequency"][k] = "{:.3f}".format(num)



    def dumpExtractedDataToFile(self,file='../extracted_data_systemCall.json'):
        with open(file, 'w') as outfile:
            json.dump(self.extracted_data,outfile,indent=4)


if __name__ == "__main__":
    json_path = "../report2.json"
    extractor = SystemCallFeatureExtractor(json_path)
    extractor.extract_features()
    extractor.dumpExtractedDataToFile()
    print extractor.extracted_data
    print("test2")



