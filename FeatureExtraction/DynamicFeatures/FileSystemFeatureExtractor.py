import json

topExt=["bak", "bat", "bmp", "cfg", "clb", "com", "vbs", "dat", "db",
"dll", "doc", "docx", "exe", "ico", "ime", "inf", "ini", "jpeg",
"jpg", "js", "lnk", "log", "otf", "pdf", "pnf", "png", "reg",
"rtf", "sav", "sys", "tmp", "txt", "xls", "xlsx", "xml","docm","ps1","psc1","psm1"]

topPt= ["C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs","C:\\ProgramData",
"C:\\Users\\Malware\\AppData\\Local\\Temp","C:\\Users\\Malware\\AppData\\Local",
"C:\\Users\\Malware\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs","C:\\Users\\Malware\\AppData\\Roaming","C:\\Users\\Malware",
"C:\\Program Files\\Common Files","C:\\Program Files","C:\\$Recycle.Bin","C:\\Windows\\System32\\drivers","C:\\Windows\\System32","C:\\Windows"]

fileTypes=["file","directory","drivers","ADS","pipe"]

fileSize=["0-64", "65-4096", "4097-262144","262144+"]

class FileSystemFeatureExtractor:

    def __init__(self,json_report_path):

        self.json_report_path = json_report_path
        self.data = json.load(open(self.json_report_path))

        self.extracted_data = {"numberOfFilesDeleted" : 0, "numberOfFilesModified" : 0, "numberOfFilesCreated" : 0, "numberOfFilesRead" : 0, "numberOfFilesAccessed" : 0,
                               "numberOfFilesDeletedInDistinctPaths" : 0, "numberOfFilesDeletedWithDistinctExtensions" : 0,
                               "numberOfFilesModifiedInDistinctPaths" : 0, "numberOfFilesModifiedWithDistinctExtensions" : 0,
                               "numberOfFilesCreatedInDistinctPaths" : 0, "numberOfFilesCreatedWithDistinctExtensions" : 0,
                               "topExtensionFrequencyOfDeletedFiles" : dict.fromkeys(topExt,0),
                               "topExtensionFrequencyOfModifiedFiles" : dict.fromkeys(topExt,0),
                               "topExtensionFrequencyOfCreatedFiles" : dict.fromkeys(topExt,0),
                               "knownPathFrequencyOfDeletedFiles" : dict.fromkeys(topPt,0),
                               "knownPathFrequencyOfModifiedFiles" : dict.fromkeys(topPt,0),
                               "knownPathFrequencyOfCreatedFiles" : dict.fromkeys(topPt,0),
                               "fileTypeFrequencyOfModifiedFiles" : dict.fromkeys(fileTypes,0),
                               "fileTypeFrequencyOfReadFiles" : dict.fromkeys(fileTypes,0),
                               "fileTypeFrequencyOfAccessedFiles" : dict.fromkeys(fileTypes,0),
                               "fileSizeFrequency" : [0] * 4,
                               "pathsDeleted" : [],"extensionsDeleted" : [],"pathsModified" : [],"extensionsModified" : [],"pathsCreated" : [],"extensionsCreated" : []
                                }

    def extract_features(self):

        generic = self.data["behavior"]["generic"]

        if "dropped" in self.data:
            dropped = self.data["dropped"]

            for k in dropped:
                if(k["size"] >= 0 and k["size"] < 65):
                    self.extracted_data["fileSizeFrequency"][0] = self.extracted_data["fileSizeFrequency"][0] + 1
                elif(k["size"] >= 65 and k["size"] < 4097):
                    self.extracted_data["fileSizeFrequency"][1] = self.extracted_data["fileSizeFrequency"][1] + 1
                elif(k["size"] >= 4097 and k["size"] < 262145):
                    self.extracted_data["fileSizeFrequency"][2] = self.extracted_data["fileSizeFrequency"][2] + 1
                if (k["size"] >= 262145):
                    self.extracted_data["fileSizeFrequency"][3] = self.extracted_data["fileSizeFrequency"][3] + 1

        for k in generic:
            if(len(k["summary"]) > 0 ):
                if("file_deleted" in k["summary"]):
                    self.extracted_data["numberOfFilesDeleted"] = self.extracted_data["numberOfFilesDeleted"] + len(k["summary"]["file_deleted"])
                    for p in k["summary"]["file_deleted"]:
                        self.extracted_data["pathsDeleted"].append("\\".join(p.split("\\")[0:-1]))
                        self.extracted_data["extensionsDeleted"].append(p.split(".")[-1])

                if("file_written" in k["summary"]):
                    self.extracted_data["numberOfFilesModified"] = self.extracted_data["numberOfFilesModified"] + len(k["summary"]["file_written"])
                    for p in k["summary"]["file_written"]:
                        self.extracted_data["pathsModified"].append("\\".join(p.split("\\")[0:-1]))
                        ext = p.split(".")[-1]
                        self.extracted_data["extensionsModified"].append(ext)

                        if(ext == "sys"):
                            self.extracted_data["fileTypeFrequencyOfModifiedFiles"]["drivers"] = self.extracted_data["fileTypeFrequencyOfModifiedFiles"]["drivers"] + 1

                        elif ":" in p.split("\\")[-1]:
                            self.extracted_data["fileTypeFrequencyOfModifiedFiles"]["ADS"] = self.extracted_data["fileTypeFrequencyOfModifiedFiles"]["ADS"] + 1

                        elif "\\\\.\\" in p:
                            self.extracted_data["fileTypeFrequencyOfModifiedFiles"]["pipe"] = self.extracted_data["fileTypeFrequencyOfModifiedFiles"]["pipe"] +1

                        else:
                            self.extracted_data["fileTypeFrequencyOfModifiedFiles"]["file"] = self.extracted_data["fileTypeFrequencyOfModifiedFiles"]["file"] + 1


                if("file_created" in k["summary"]):
                    self.extracted_data["numberOfFilesCreated"] = self.extracted_data["numberOfFilesCreated"] + len(k["summary"]["file_created"])
                    for p in k["summary"]["file_created"]:
                        self.extracted_data["pathsCreated"].append("\\".join(p.split("\\")[0:-1]))
                        self.extracted_data["extensionsCreated"].append(p.split(".")[-1])

                if("file_read" in k["summary"]):
                    self.extracted_data["numberOfFilesRead"] = self.extracted_data["numberOfFilesRead"] + len(k["summary"]["file_read"])
                    for p in k["summary"]["file_read"]:
                        ext = p.split(".")[-1]

                        if ext == "sys":
                            self.extracted_data["fileTypeFrequencyOfReadFiles"]["drivers"] = self.extracted_data["fileTypeFrequencyOfReadFiles"]["drivers"] + 1

                        elif ":" in p.split("\\")[-1]:
                            self.extracted_data["fileTypeFrequencyOfReadFiles"]["ADS"] = self.extracted_data["fileTypeFrequencyOfReadFiles"]["ADS"] + 1

                        elif "\\\\.\\" in p:
                            self.extracted_data["fileTypeFrequencyOfReadFiles"]["pipe"] = self.extracted_data["fileTypeFrequencyOfReadFiles"]["pipe"] + 1

                        else:
                            self.extracted_data["fileTypeFrequencyOfReadFiles"]["file"] = self.extracted_data["fileTypeFrequencyOfReadFiles"]["file"] + 1

                if("file_opened" in k["summary"]):
                    self.extracted_data["numberOfFilesAccessed"] = self.extracted_data["numberOfFilesAccessed"] + len(k["summary"]["file_opened"])
                    for p in k["summary"]["file_opened"]:
                        ext = p.split(".")[-1]

                        if(len(p.split(".")) == 1):
                            self.extracted_data["fileTypeFrequencyOfAccessedFiles"]["directory"]  = self.extracted_data["fileTypeFrequencyOfAccessedFiles"]["directory"] + 1

                        elif ext == "sys":
                            self.extracted_data["fileTypeFrequencyOfAccessedFiles"]["drivers"] = self.extracted_data["fileTypeFrequencyOfAccessedFiles"]["drivers"] + 1

                        elif ":" in p.split("\\")[-1]:
                            self.extracted_data["fileTypeFrequencyOfAccessedFiles"]["ADS"] = self.extracted_data["fileTypeFrequencyOfAccessedFiles"]["ADS"] + 1

                        elif "\\\\.\\" in p:
                            self.extracted_data["fileTypeFrequencyOfAccessedFiles"]["pipe"] = self.extracted_data["fileTypeFrequencyOfAccessedFiles"]["pipe"] + 1

                        else:
                            self.extracted_data["fileTypeFrequencyOfAccessedFiles"]["file"] = self.extracted_data["fileTypeFrequencyOfAccessedFiles"]["file"] + 1

        self.numberOfFilesDeletedInDistinctPaths = len(set(self.extracted_data["pathsDeleted"]))
        self.numberOfFilesDeletedWithDistinctExtensions = len(set(self.extracted_data["extensionsDeleted"]))

        self.numberOfFilesModifiedInDistinctPaths = len(set(self.extracted_data["pathsModified"]))
        self.numberOfFilesModifiedWithDistinctExtensions = len(set(self.extracted_data["extensionsModified"]))

        self.numberOfFilesCreatedInDistinctPaths = len(set(self.extracted_data["pathsCreated"]))
        self.numberOfFilesCreatedWithDistinctExtensions = len(set(self.extracted_data["extensionsCreated"]))

        for key in self.extracted_data["topExtensionFrequencyOfDeletedFiles"]:
            self.extracted_data["topExtensionFrequencyOfDeletedFiles"][key] = self.extracted_data["extensionsDeleted"].count(key)

        for x in self.extracted_data["pathsDeleted"]:
            for key in topPt:
                if key in x:
                    self.extracted_data["knownPathFrequencyOfDeletedFiles"][key] = self.extracted_data["knownPathFrequencyOfDeletedFiles"][key] + 1
                    break

        for key in self.extracted_data["topExtensionFrequencyOfModifiedFiles"]:
            self.extracted_data["topExtensionFrequencyOfModifiedFiles"][key] = self.extracted_data["extensionsModified"].count(key)

        for x in self.extracted_data["pathsModified"]:
            for key in topPt:
                if key in x:
                    self.extracted_data["knownPathFrequencyOfModifiedFiles"][key] = self.extracted_data["knownPathFrequencyOfModifiedFiles"][key] + 1
                    break

        for key in self.extracted_data["topExtensionFrequencyOfCreatedFiles"]:
            self.extracted_data["topExtensionFrequencyOfCreatedFiles"][key] = self.extracted_data["extensionsCreated"].count(key)

        for x in self.extracted_data["pathsCreated"]:
            for key in topPt:
                if key in x:
                    self.extracted_data["knownPathFrequencyOfCreatedFiles"][key] = self.extracted_data["knownPathFrequencyOfCreatedFiles"][key] + 1
                    break

    def dumpExtractedDataToFile(self,file='../extracted_data_fileSystem.json'):
        with open(file, 'w') as outfile:
            json.dump(self.extracted_data, outfile,indent=4)


if __name__ == "__main__":
    json_path = "../report2.json"
    extractor = FileSystemFeatureExtractor(json_path)
    extractor.extract_features()
    extractor.dumpExtractedDataToFile()
    print extractor.extracted_data
